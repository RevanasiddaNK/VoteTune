// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String     @id @default(uuid())
  email    String     @unique
  //role     Role
  provider Provider
  upvotes  Upvote[]
  Playlist Playlist[]

  streamsAdded Stream[] @relation("StreamAddedBy")
}

// enum Role {
//   Streamer
//   Enduser
// }

enum Provider {
  Google @map("google")
}

model Stream {
  id             String     @id @default(uuid())
  title          String     @default("Title not found")
  bigThumbnail   String     @default("https://img.lovepik.com/photo/45014/5040.jpg_wh860.jpg")
  smallThumbnail String     @default("https://img.freepik.com/premium-photo/3d-youtube-icon-neon-black-wall_289054-64.jpg")
  url            String
  isPlayed       Boolean    @default(false)
  playedAt       DateTime?
  createdAt      DateTime   @default(now())
  extractedId    String
  type           StreamType

  active  Boolean  @default(true)
  upvotes Upvote[]

  playlistId String
  playlist   Playlist? @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  addedById String
  addedBy   User   @relation("StreamAddedBy", fields: [addedById], references: [id])

  @@index([playlistId])
  @@index([addedById])
  @@index([createdAt])
}

model Playlist {
  id      String   @id @default(uuid())
  name    String   @db.VarChar(255)
  streams Stream[]

  createdAt     DateTime        @default(now())
  userId        String
  createdBy     User?           @relation(fields: [userId], references: [id])
  currentStream currentStream[]

  @@index([name]) //Fast look ups by name
}

model currentStream {
  playlistId String   @id
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  title          String? @default("No Video Found") // Default if no title provided
  url            String  @default("https://www.youtube.com/watch?v=87JIOAX3njM") // Default URL
  bigThumbnail   String  @default("https://i.ytimg.com/vi/P1fIdFRnfqw/maxresdefault.jpg") // Default thumbnail
  smallThumbnail String  @default("https://i.ytimg.com/vi/P1fIdFRnfqw/maxresdefault.jpg") // Default small thumbnail
  extractedId    String  @default("87JIOAX3njM") // Default extracted ID

  @@unique([playlistId]) // only one current stream per playlist
}

enum StreamType {
  Youtube
  Spotify
}

model Upvote {
  id       String @id @default(uuid())
  User     User   @relation(fields: [userId], references: [id])
  userId   String
  Stream   Stream @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId String

  @@unique([userId, streamId])
}
