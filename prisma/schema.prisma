// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // Change to 'mysql' for MySQL
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  //role     Role
  provider Provider
  streams  Stream[]
  upvotes  Upvote[]
}

// enum Role {
//   Streamer
//   Enduser
// }

enum Provider {
  Google
}

model Stream {
  id             String         @id @default(uuid())
  title          String         @default("Title not found")
  bigThumbnail   String         @default("https://img.lovepik.com/photo/45014/5040.jpg_wh860.jpg")
  smallThumbnail String         @default("https://img.freepik.com/premium-photo/3d-youtube-icon-neon-black-wall_289054-64.jpg")
  url            String
  isPlayed       Boolean        @default(false)
  playedAt       DateTime?
  createdAt      DateTime       @default(now())
  extractedId    String
  type           StreamType
  User           User?          @relation(fields: [userId], references: [id])
  userId         String?
  active         Boolean        @default(true)
  upvotes        Upvote[]
  currentStream  currentStream?
}

model currentStream {
  userId   String  @id
  streamId String? @unique
  stream   Stream? @relation(fields: [streamId], references: [id])
}

enum StreamType {
  Youtube
  Spotify
}

model Upvote {
  id       String  @id @default(uuid())
  User     User?   @relation(fields: [userId], references: [id])
  userId   String?
  Stream   Stream? @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId String?

  @@unique([userId, streamId])
}
